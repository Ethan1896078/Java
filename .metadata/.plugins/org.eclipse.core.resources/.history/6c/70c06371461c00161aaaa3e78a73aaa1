package pers.ethan.thread;

public class WaitThread {

	public static void main(String[] args) {
		class SharedClass{
		}
		
		class Wait implements Runnable{
			private SharedClass sharedInstance;
			
			public Wait(SharedClass sharedInstance) {
				this.sharedInstance = sharedInstance;
			}

			public void run() {
				synchronized(sharedInstance){
					while (true) {
						System.out.println(Thread.currentThread().getName() + " -> before wait()" );
						try {
							sharedInstance.wait();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						System.out.println(Thread.currentThread().getName() + " -> after wait()" );
					}
				}
			}
		}
		
		class Notify implements Runnable{
			private SharedClass sharedInstance;
			
			public Notify(SharedClass sharedInstance) {
				this.sharedInstance = sharedInstance;
			}

			public void run() {
				synchronized(sharedInstance){
					while (true) {
						System.out.println(Thread.currentThread().getName() + " -> before wait()" );
						try {
							sharedInstance.wait();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
						System.out.println(Thread.currentThread().getName() + " -> after wait()" );
					}
				}
				
			}
		}
		
		SharedClass sharedInstance = new SharedClass();
		new Thread(new Wait(sharedInstance), "Wait").start();
		
		
		
		
	}

	
}
